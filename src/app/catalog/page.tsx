import { IItem } from "@/api/types";
import { mockItems } from "@/mock-data/items";
import { Metadata } from "next";

export const metadata: Metadata = {
  title: "Каталог",
  description: "Generated by create next app",
};

async function getData(search?: string | null) {
  if (search === null || search === undefined) {
    return Promise.resolve(mockItems);
  }

  return Promise.resolve(
    mockItems.filter((item) => item.name.includes(search))
  );
}

interface IProps {
  searchParams?: {
    search?: string;
  };
}

interface IColumn {
  id: string;
  title: string;
  align?: "right" | "left";
}

const columns: IColumn[] = [
  {
    id: "id",
    title: "Артикл",
  },
  {
    id: "name",
    title: "Наименование",
  },
  {
    id: "price",
    title: "Цена",
    align: "right",
  },
];

export default async function Catalog({ searchParams }: IProps) {
  const data = await getData(searchParams?.search);

  return (
    <table className="min-w-full text-left text-sm font-light text-surface dark:text-white">
      <thead className="border-b border-neutral-200 font-medium dark:border-white/10">
        <tr>
          {columns.map((column) => (
            <th key={column.id} scope="col" className="px-6 py-4">
              {column.title}
            </th>
          ))}
        </tr>
      </thead>
      <tbody>
        {data.map((row) => (
          <tr
            key={row.id}
            className="border-b border-neutral-200 dark:border-white/10"
          >
            {columns.map((column) => (
              <td key={column.id} className="whitespace-nowrap px-6 py-4">
                {row[column.id as keyof IItem]}
              </td>
            ))}
          </tr>
        ))}
      </tbody>
    </table>
  );
}
